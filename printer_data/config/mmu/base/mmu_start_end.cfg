#####################################################################
# _MMU_START_SETUP
#####################################################################

[gcode_macro _MMU_START_SETUP]
description: Called when starting print to setup MMU
gcode:
    {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}
    {% set ttg_map = printer.mmu.ttg_map %}
    {% set gate_fil_names = printer.mmu.gate_filament_name %}
    {% set gate_colors = printer.mmu.gate_color %}
    {% set num_gates = ttg_map|length %}
    {% set referenced_tools = (params.REFERENCED_TOOLS|default("!referenced_tools!")|string).split(",")
        if (params.REFERENCED_TOOLS and params.REFERENCED_TOOLS != "")
        else [] %}
    {% set tool_colors = (params.TOOL_COLORS|default("")|string).split(",")
        if (params.TOOL_COLORS and params.TOOL_COLORS != "!colors!" and params.TOOL_COLORS != "")
        else ['000000'] * num_gates %}
    {% set tool_temps = (params.TOOL_TEMPS|default("")|string).split(",")
        if (params.TOOL_TEMPS and params.TOOL_TEMPS != "!temperatures!" and params.TOOL_TEMPS != "")
        else ['0'] * num_gates %}
    {% set tool_materials = (params.TOOL_MATERIALS|default("")|string).split(",")
        if (params.TOOL_MATERIALS and params.TOOL_MATERIALS != "!materials!" and params.TOOL_MATERIALS != "")
        else ['unknown'] * num_gates %}
    {% set filament_names = (params.FILAMENT_NAMES|default("")|string).split(",")
        if (params.FILAMENT_NAMES and params.FILAMENT_NAMES != "!filament_names!" and params.FILAMENT_NAMES != "")
        else [''] * num_gates %}
    {% set purge_volumes = (params.PURGE_VOLUMES|default("")|string)
        if (params.PURGE_VOLUMES and params.PURGE_VOLUMES != "!purge_volumes!" and params.PURGE_VOLUMES != "")
        else "" %}

    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set home_mmu = vars.home_mmu|lower == 'true' %}

    {% set filament_loaded = printer.mmu.filament_pos == 10 %}
    {% set using_bypass = printer.mmu.tool == -2 %}
    {% set num_colors = referenced_tools|length %}

    {% if printer.mmu.enabled %}
        # Precaution for when printing from Octoprint (but harmless if printing from virtual SD card)
        MMU_PRINT_START

        # Typically this would be something like a G28 to ensure homing in case of pause
        {% if not vars.user_pre_initialize_extension == "" %}
            {vars.user_pre_initialize_extension}
        {% endif %}

        # Establish number of colors in print and tools being used
        {% if referenced_tools == ['!referenced_tools!'] %}
            MMU_LOG MSG="Happy Hare gcode pre-processor is probably disabled or not setup correctly"
            {% set referenced_tools = [] %}
            {% set num_colors = -1 %}
        {% elif referenced_tools == [] %}
            {% set num_colors = 1 %}
        {% endif %}

        # Sanity check the parsed information
        {% if tool_colors|length != tool_temps|length or tool_colors|length != tool_materials|length or tool_colors|length != filament_names|length %}
            MMU_LOG MSG="Warning: Slicer defined extruder attributes have different lengths. Possibly an issue with parsing slicer information or missing parameters to MMU_START_SETUP"
            MMU_LOG MSG="  TOOL_COLORS={tool_colors}"
            MMU_LOG MSG="  TOOL_TEMPS={tool_temps}"
            MMU_LOG MSG="  TOOL_MATERIALS={tool_materials}"
            MMU_LOG MSG="  FILAMENT_NAMES={filament_names}"
        {% endif %}
        {% set num_slicer_tools = tool_colors|length %}
        {% if tool_colors|length != num_gates or tool_temps|length != num_gates or tool_materials|length != num_gates or filament_names|length != num_gates %}
            {% if not vars.automap_strategy %}
                MMU_LOG MSG="Warning: Looks like slicer is setup with {num_slicer_tools} extruders but your MMU has {num_gates} gates! These should match but will attempt to continue"
            {% else %}
                MMU_LOG MSG="Warning: Looks like slicer is setup with {num_slicer_tools} extruders but your MMU has {num_gates} gates! Probably using auto-map feature."
            {% endif %}
        {% endif %}

        # Setup slicer tool map
        MMU_SLICER_TOOL_MAP RESET=1 PURGE_VOLUMES={purge_volumes} NUM_SLICER_TOOLS={num_slicer_tools} INITIAL_TOOL={initial_tool}
        {% for t in range(num_slicer_tools) %}
            MMU_SLICER_TOOL_MAP TOOL={t} TEMP={tool_temps[t]} MATERIAL='{tool_materials[t]}' COLOR={tool_colors[t]} NAME='{filament_names[t]}' {"USED=0" if t|string not in referenced_tools and t != initial_tool else ""} QUIET=1 AUTOMAP={vars.automap_strategy}
        {% endfor %}

        # Build message in case of error
        {% set custom_msg = [] %}
        {% set m = [] %}
        {% for tool in referenced_tools %}
            {% set _ = m.append("T" + tool|string + " (Gate" + ttg_map[tool|int]|string + ")") %}
        {% endfor %}
        {% set line = "Initial Tool: T%s" % initial_tool %}
        {% set _ = m.append(line) %}
        {% set _ = custom_msg.append("Print requires tools: %s" % ", ".join(m)) %}
        {% set _ = custom_msg.append("Manually ensure that T" + initial_tool|string + " is loaded and all other tools available before resuming print") %}

        # Display map summary
        {% if num_colors > 1 %}
            MMU_SLICER_TOOL_MAP SPARSE_PURGE_MAP=1 NUM_SLICER_TOOLS={num_slicer_tools}
        {% else %}
            MMU_SLICER_TOOL_MAP
        {% endif %}

        SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=show_abort VALUE={True} # Show abort option during startup
        {% if using_bypass and filament_loaded %}
            MMU_LOG MSG="MMU Bypass selected and loaded"
            {% if num_colors > 1 %}
                SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"
                MMU_PAUSE MSG="Bypass selected for multi-color print"
            {% endif %}
        {% else %}
            # Preemptively set verbose dialog message in case of additional mmu error during start
            SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"
            {% if home_mmu %}
                {% if not filament_loaded %}
                    MMU_HOME
                {% else %}
                    MMU_LOG MSG="Skipping homing MMU because filament is already loaded"
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_setup_run VALUE={True}


#####################################################################
# _MMU_START_CHECK
#####################################################################

[gcode_macro _MMU_START_CHECK]
description: Helper macro. Can be called to perform pre-start checks on MMU based on slicer requirements
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set check_gates = vars.check_gates|lower == 'true' %}
    {% set using_bypass = printer.mmu.tool == -2 %}

    {% if printer.mmu.enabled %}
        {% set slicer_tool_map = printer.mmu.slicer_tool_map %}
        {% set initial_tool = slicer_tool_map.initial_tool %}
        {% set tools = slicer_tool_map.referenced_tools %}
        {% if not using_bypass %}
            # Future: Could do extra checks like filament material type/color checking here
            #         to ensure what's loaded on MMU matches the slicer expectations
            {% if check_gates and tools|length > 0 %}
                # Pre-check gates option if multi-color print. Will pause if tools missing
                MMU_LOG MSG="Checking all required gates have filament loaded..."
                {% if not printer.mmu.is_homed %}
                    MMU_HOME
                {% endif %}
                MMU_CHECK_GATE TOOLS={tools|join(",")}
            {% endif %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_check_run VALUE={True}


#####################################################################
# _MMU_START_LOAD_INITIAL_TOOL
#####################################################################

[gcode_macro _MMU_START_LOAD_INITIAL_TOOL]
description: Helper to load initial tool if not paused
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set load_initial_tool = vars.load_initial_tool|lower == 'true' %}
    {% set using_bypass = printer.mmu.tool == -2 %}
    {% set filament_loaded = printer.mmu.filament_pos == 10 %}
    {% set slicer_tool_map = printer.mmu.slicer_tool_map %}
    {% set initial_tool = slicer_tool_map.initial_tool %}
    {% set tools = slicer_tool_map.referenced_tools %}

    {% if printer.mmu.enabled %}
        {% if not using_bypass and tools|length > 0 %}
            {% if load_initial_tool and (initial_tool is not none and initial_tool >= 0) %}
                MMU_LOG MSG="Loading initial tool T{initial_tool}..."
                MMU_CHANGE_TOOL STANDALONE=1 TOOL={initial_tool}
            {% endif %}
        {% elif not filament_loaded %}
            MMU_PAUSE MSG="Load bypass or initial tool before resuming print"
        {% else %}
            MMU_LOG MSG="Using bypass"
        {% endif %}
    {% endif %}

    # Important: Clear preemptive error message and remove abort option from pause dialog
    SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE='""'
    SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=show_abort VALUE={False}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_load_initial_tool_run VALUE={True}


#####################################################################
# _MMU_END
#####################################################################

[gcode_macro _MMU_END]
description: Called when ending print to finalize MMU
gcode:
    {% set eject = params.EJECT|default(0) %}
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set eject_tool = vars.eject_tool|lower == 'true' %}
    {% set reset_ttg = vars.reset_ttg|lower == 'true' %}
    {% set dump_stats = vars.dump_stats|lower == 'true' %}
    {% set slicer_tool_map = printer.mmu.slicer_tool_map %}
    {% set tools = slicer_tool_map.referenced_tools %}
    {% set using_bypass = printer.mmu.tool == -2 %}

    {% if printer.mmu.enabled %}
        {% if not vars.user_print_end_extension == "" %}
            {vars.user_print_end_extension}
        {% endif %}

        {% if eject or eject_tool %}
            MMU_LOG MSG="Ejecting filament on print end"
            MMU_EJECT RESTORE=0
        {% endif %}

        {% if reset_ttg %}
            MMU_TTG_MAP RESET=1 QUIET=1
        {% endif %}

        {% if dump_stats and not using_bypass and tools|length > 0 %}
            MMU_STATS
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_end_run VALUE={True}


